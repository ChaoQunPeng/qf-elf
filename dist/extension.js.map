{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://qf-elf/./src/extension.ts","webpack://qf-elf/./src/template/dialog-form.ts","webpack://qf-elf/./src/template/dialog-table.ts","webpack://qf-elf/./src/template/dialog.ts","webpack://qf-elf/./src/template/table.ts","webpack://qf-elf/./src/template/utils.ts","webpack://qf-elf/external commonjs \"vscode\"","webpack://qf-elf/external node-commonjs \"fs\"","webpack://qf-elf/external node-commonjs \"path\"","webpack://qf-elf/webpack/bootstrap","webpack://qf-elf/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport path = require('path');\r\nimport fs = require('fs');\r\nimport table from './template/table';\r\nimport dialogForm from './template/dialog-form';\r\nimport dialogTable from './template/dialog-table';\r\nimport dialog from './template/dialog';\r\nimport { createTableColumn, createFormItem, createQfLabel } from './template/utils';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\t// 创建表格列表文件\r\n\tlet createTableListDisposable = vscode.commands.registerCommand('qf-elf.createTableList', async (uri) => {\r\n\t\tlet name = await showInputBox();\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\tcreateFile(name, await table.getTpl({ name: name }), uri);\r\n\t});\r\n\r\n\t// 生成表格列\r\n\tlet createTableColDisposable = vscode.commands.registerCommand('qf-elf.createTableCol', async () => {\r\n\t\tlet text = await vscode.env.clipboard.readText();\r\n\r\n\t\tlet cols = createTableColumn(text);\r\n\r\n\t\tpasteContent(cols);\r\n\t});\r\n\r\n\t// 生成弹框种带表格的文件\r\n\tlet createDialogTableDisposable = vscode.commands.registerCommand('qf-elf.createDialogTable', async (uri) => {\r\n\t\tlet name = await showInputBox();\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\tcreateFile(name, await dialogTable.getTpl({ name: name }), uri);\r\n\t});\r\n\r\n\t// 生成表单项\r\n\tlet createFormItemDisposable = vscode.commands.registerCommand('qf-elf.createFormItem', async (uri) => {\r\n\t\tlet text = await vscode.env.clipboard.readText();\r\n\r\n\t\tlet cols = createFormItem(text);\r\n\r\n\t\tpasteContent(cols);\r\n\t});\r\n\r\n\t// 生成弹框带表单的文件\r\n\tlet createDialogFormDisposable = vscode.commands.registerCommand('qf-elf.createDialogForm', async (uri) => {\r\n\t\tlet name = await showInputBox();\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\tcreateFile(name, await dialogForm.getTpl({ name: name }), uri);\r\n\t});\r\n\r\n\t// 生成纯弹框\r\n\tlet createDialogDisposable = vscode.commands.registerCommand('qf-elf.createDialog', async (uri) => {\r\n\t\tlet name = await showInputBox();\r\n\r\n\t\tif (!name) {\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\tcreateFile(name, await dialog.getTpl({ name: name }), uri);\r\n\t});\r\n\r\n\t// 生成qf-label\r\n\tlet createQflabelDisposable = vscode.commands.registerCommand('qf-elf.createQflabel', async (uri) => {\r\n\t\tlet text = await vscode.env.clipboard.readText();\r\n\r\n\t\tlet cols = createQfLabel(text);\r\n\r\n\t\tpasteContent(cols);\r\n\t});\r\n\r\n\tconst disposes: any[] = [\r\n\t\tcreateTableListDisposable,\r\n\t\tcreateTableColDisposable,\r\n\t\tcreateDialogTableDisposable,\r\n\t\tcreateFormItemDisposable,\r\n\t\tcreateDialogFormDisposable,\r\n\t\tcreateDialogDisposable,\r\n\t\tcreateQflabelDisposable\r\n\t];\r\n\r\n\tdisposes.forEach(d => {\r\n\t\tcontext.subscriptions.push(d);\r\n\t});\r\n}\r\n\r\n/**\r\n * 粘贴内容\r\n * @param params \r\n */\r\nasync function pasteContent(content: string) {\r\n\tconst editor = vscode.window.activeTextEditor;\r\n\r\n\tif (!editor) {\r\n\t\treturn;\r\n\t};\r\n\r\n\tconst selection = editor.selection;\r\n\r\n\teditor.edit(builder => builder.replace(selection, content));\r\n}\r\n\r\n\r\n/**\r\n * 打开inputbox\r\n * @param uri \r\n * @returns \r\n */\r\nasync function showInputBox() {\r\n\tlet name = await vscode.window.showInputBox({\r\n\t\tplaceHolder: '输入文件名称，请使用kebab命名方式',\r\n\t\tprompt: '按回车确定'\r\n\t});\r\n\r\n\tname = name?.replace(/\\s+/g, \"\");\r\n\r\n\tif (!name) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// let moduleName = (() => {\r\n\t// \tlet index = uri.path.split('/').findIndex((e: any) => e === 'src');\r\n\r\n\t// \tif (index === -1) {\r\n\t// \t\treturn '';\r\n\t// \t} else {\r\n\t// \t\treturn uri.path.split('/').find((e: any, i: number) => i === index + 2) + '-';\r\n\t// \t}\r\n\t// })();\r\n\r\n\treturn `${name}`;\r\n}\r\n\r\n/**\r\n * 创建文件\r\n * @param uri \r\n * @param content 内容 \r\n * @returns \r\n */\r\nasync function createFile(name: string, content: string, uri: any) {\r\n\tlet stats = fs.statSync(uri.fsPath);\r\n\r\n\tconst filePath = path.join(\r\n\t\tstats.isDirectory() ? uri.fsPath : path.dirname(uri.fsPath),\r\n\t\t`${name}.vue`\r\n\t);\r\n\r\n\tconst hasFile = fs.existsSync(filePath);\r\n\r\n\tif (hasFile) {\r\n\t\tvscode.window.showErrorMessage(`文件已存在`);\r\n\t} else {\r\n\t\t// 创建模板\r\n\t\tfs.writeFile(filePath, content, (err) => {\r\n\t\t\tif (err) {\r\n\t\t\t\tvscode.window.showInformationMessage(err.message);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvscode.window.showTextDocument(vscode.Uri.file(filePath));\r\n\r\n\t\t\tvscode.window.showInformationMessage(`创建成功!`);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport function deactivate() { }\r\n","import * as vscode from 'vscode';\r\nimport { createFormItem } from './utils';\r\n\r\n/**\r\n * 生成form data\r\n * @param text \r\n * @returns \r\n */\r\nfunction generateFormData(text: string) {\r\n  try {\r\n    let jsonData = JSON.parse(text);\r\n\r\n    return JSON.stringify(jsonData)?.replace('/,/g', '\\r\\n ,') ?? '{}';\r\n  } catch (error) {\r\n    return '{}';\r\n  }\r\n}\r\n\r\n/**\r\n * 获取模板\r\n * @param params \r\n * @returns \r\n */\r\nconst getTpl = async (params: { name: string }) => {\r\n  let text = await vscode.env.clipboard.readText();\r\n\r\n  const tpl = `\r\n  <template>\r\n   <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\r\n    <div id=\"${params.name}\" v-loading=\"loading\">\r\n      <el-form class=\"qf-form\" :model=\"form\" ref=\"form\" :rules=\"rules\" label-width=\"45px\" :hide-required-asterisk=\"true\">\r\n        <el-row :gutter=\"24\">\r\n          ${createFormItem(text)}\r\n        </el-row>\r\n      </el-form>\r\n    </div>\r\n\r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\r\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\r\n      </div>\r\n    </template>\r\n  </qf-dialog>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: '${params.name}',\r\n\r\n  props: {\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      form: ${generateFormData(text)},\r\n      rules: {},\r\n      loading: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.$dialogRef.record?.editId ? '编辑' : '添加';\r\n    }\r\n  },\r\n\r\n  created() {\r\n    if (this.$dialogRef.record?.editId) {\r\n\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 编辑\r\n     */\r\n    async edit() {\r\n      let result = await this.$api.模块名.方法名(this.form).catch(err => {\r\n        this.$message.success('${`提交失败`}');\r\n        console.error(err);\r\n      });\r\n\r\n      if (result) {\r\n        this.$message.success('${`提交成功`}');\r\n        this.$dialogRef.onOk();\r\n        this.cancel();\r\n      }\r\n    },\r\n    /**\r\n     * 新增\r\n     */\r\n    async add() {\r\n      let result = await this.$api.模块名.方法名(this.form).catch(err => {\r\n        this.$message.success('${`提交失败`}');\r\n        console.error(err);\r\n      });\r\n\r\n      if (result) {\r\n        this.$message.success('${`提交成功`}');\r\n        this.$dialogRef.onOk();\r\n        this.cancel();\r\n      }\r\n    },\r\n    cancel() {\r\n      this.$refs.dialog.close();\r\n    },\r\n    ok() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          if (this.$dialogRef.record.editId) {\r\n            this.edit();\r\n          } else {\r\n            this.add();\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n  `;\r\n\r\n  return tpl;\r\n};\r\n\r\n\r\nexport default {\r\n  getTpl\r\n};","import * as vscode from 'vscode';\r\nimport { createTableColumn } from './utils';\r\n\r\nconst getTpl = async (params: { name: string }) => {\r\n  let text = await vscode.env.clipboard.readText();\r\n\r\n  const tpl=`\r\n  <template>\r\n   <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\r\n    <div id=\"${params.name}\">\r\n      <el-table class=\"qf-table-detail\" :data=\"listData.rows\" style=\"width: 100%\">\r\n          ${createTableColumn(text)}\r\n      </el-table>\r\n    </div>\r\n\r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\r\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\r\n      </div>\r\n    </template>\r\n  </qf-dialog>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: '${params.name}',\r\n\r\n  props: {\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      queryParams: {\r\n        search: '',\r\n        page: 1,\r\n        page_size: 10\r\n      },\r\n      listData: {\r\n        rows: [],\r\n        total: 0\r\n      },\r\n      loading: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    dialogTitle() {\r\n      return this.$dialogRef.record?.editId ? '编辑' : '添加';\r\n    }\r\n  },\r\n\r\n  created() {\r\n    if (this.$dialogRef.record?.editId) {\r\n    }\r\n\r\n    this.getList();\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 获取列表\r\n     */\r\n    async getList() {\r\n      this.loading = true;\r\n\r\n      let result = await this.$api.模块名.getList(this.queryParams).catch(err => {\r\n        this.$message.error('获取列表失败');\r\n        console.error(err);\r\n      });\r\n\r\n      if (result) {\r\n        this.listData = result;\r\n      }\r\n\r\n      this.loading = false;\r\n    },\r\n    cancel() {\r\n      this.$refs.dialog.close();\r\n    },\r\n    ok() { }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n  \r\n  `;\r\n\r\n  return tpl;\r\n};\r\n\r\n\r\nexport default {\r\n  getTpl\r\n};","/**\r\n * 获取模板\r\n * @param params \r\n * @returns \r\n */\r\nconst getTpl = async (params: { name: string }) => {\r\n\r\n  const tpl = `\r\n  <template>\r\n  <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\r\n    <div id=\"${params.name}\" v-loading=\"loading\">\r\n      \r\n    </div>\r\n\r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\r\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\r\n      </div>\r\n    </template>\r\n  </qf-dialog>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: '${params.name}',\r\n\r\n  props: {\r\n    visible: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      loading: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    dialogTitle() {\r\n      return '标题';\r\n    }\r\n  },\r\n\r\n  created() {\r\n    \r\n  },\r\n\r\n  methods: {\r\n    cancel() {\r\n      this.$refs.dialog.close();\r\n    },\r\n    ok() {\r\n      this.$dialogRef.onOk();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n  `;\r\n\r\n  return tpl;\r\n};\r\n\r\n\r\nexport default {\r\n  getTpl\r\n};","import * as vscode from 'vscode';\r\nimport { createTableColumn } from './utils';\r\n\r\nconst getTpl = async (params: { name: string }) => {\r\n  let text = await vscode.env.clipboard.readText();\r\n\r\n  const tpl = `<template>\r\n  <div id=\"${params.name}\" v-loading=\"loading\">\r\n    <el-table class=\"qf-table\" :data=\"listData.rows\" style=\"width: 100%\">\r\n      ${createTableColumn(text)}\r\n    </el-table>\r\n\r\n    <div class=\"text-right mt6\" v-if=\"listData.total != 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"total,prev, pager, next\"\r\n        :current-page=\"queryParams.page\"\r\n        @current-change=\"paginChange\"\r\n        :total=\"listData.total\"\r\n        :page-size=\"queryParams.page_size\"\r\n      ></el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: '${params.name}',\r\n\r\n  data() {\r\n    return {\r\n      queryParams: {\r\n        search: '',\r\n        page: 1,\r\n        page_size: 10\r\n      },\r\n      listData: {\r\n        rows: [],\r\n        total: 0\r\n      },\r\n      loading: false\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.getList();\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 查询\r\n     */\r\n    searchOnInput(value) {\r\n      this.$debounce(() => {\r\n        this.queryParams.page = 1;\r\n        this.queryParams.search = value;\r\n        this.getList();\r\n      }, 300);\r\n    },\r\n    /**\r\n     * 分页\r\n     */\r\n    paginChange(page) {\r\n      this.queryParams.page = page;\r\n      this.getList();\r\n    },\r\n    /**\r\n     * 获取列表\r\n     */\r\n    async getList() {\r\n      this.loading = true;\r\n\r\n      let result = await this.$api.模块名.getList(this.queryParams).catch(err => {\r\n        this.$message.error('获取列表失败');\r\n        console.error(err);\r\n      });\r\n\r\n      if (result) {\r\n        this.listData = result;\r\n      }\r\n\r\n      this.loading = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>`;\r\n\r\n  return tpl;\r\n};\r\n\r\n\r\nexport default {\r\n  getTpl\r\n};","/**\r\n * 生成表格列\r\n * @param json 剪切板中的文本\r\n * @returns 生成好的表格模板\r\n */\r\nexport function createTableColumn(json: string) {\r\n  try {\r\n    let jsonData = JSON.parse(json);\r\n\r\n\r\n    const createTpl = (json: any) => {\r\n      let tpl = ``;\r\n\r\n      for (const key in json) {\r\n        tpl += `\r\n\t\t\t\t<el-table-column prop=\"${key}\" label=\"${json[key]}\">\r\n\t\t\t\t\t<template slot-scope=\"scope\">\r\n\t\t\t\t\t\t{{ scope.row.${key} | emptyDisplay }}\r\n\t\t\t\t\t</template>\r\n\t\t\t\t</el-table-column>\r\n        `;\r\n      }\r\n\r\n      return tpl;\r\n    };\r\n\r\n    let cols = createTpl(jsonData);\r\n\r\n    return cols;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * 生成表单项\r\n * @param text 剪切板中的文本\r\n * @returns 生成好的表格模板\r\n */\r\nexport function createFormItem(json: string) {\r\n\r\n  try {\r\n    let jsonData = JSON.parse(json);\r\n\r\n    const createTpl = (json: any) => {\r\n      let tpl = ``;\r\n\r\n      for (const key in json) {\r\n        tpl += `\r\n\t\t\t\t<el-col :span=\"24\">\r\n          <el-form-item prop=\"${key}\">\r\n            <template #label>\r\n              <i class=\"iconfont icon-account\"></i>\r\n            </template>\r\n            <el-input v-model.trim=\"form.${key}\" placeholder=\"${json[key]}\" maxlength=\"30\" clearable></el-input>\r\n          </el-form-item>\r\n        </el-col>\r\n        `;\r\n      }\r\n\r\n      return tpl;\r\n    };\r\n\r\n    let cols = createTpl(jsonData);\r\n\r\n    return cols;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}\r\n\r\n/**\r\n * 生成qf-label\r\n * @param text 剪切板中的文本\r\n * @returns 生成好的表格模板\r\n */\r\nexport function createQfLabel(json: string) {\r\n\r\n  try {\r\n    let jsonData = JSON.parse(json);\r\n\r\n    const createTpl = (json: any) => {\r\n      let tpl = ``;\r\n\r\n      for (const key in json) {\r\n        tpl += `\r\n        <qf-label label=\"${json[key]}\">{{pageData.${key}  | emptyDisplay}}</qf-label>\r\n        `;\r\n      }\r\n\r\n      return tpl;\r\n    };\r\n\r\n    let cols = createTpl(jsonData);\r\n\r\n    return cols;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["pasteContent","content","editor","vscode","window","activeTextEditor","selection","edit","builder","replace","showInputBox","name","placeHolder","prompt","createFile","uri","stats","fs","statSync","fsPath","filePath","path","join","isDirectory","dirname","existsSync","showErrorMessage","writeFile","err","showInformationMessage","message","showTextDocument","Uri","file","context","commands","registerCommand","getTpl","text","env","clipboard","readText","createTableColumn","createFormItem","createQfLabel","forEach","d","subscriptions","push","params","tpl","jsonData","JSON","parse","stringify","error","generateFormData","json","createTpl","key","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}