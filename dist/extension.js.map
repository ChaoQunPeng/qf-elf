{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://qf-elf/./src/extension.ts","webpack://qf-elf/./src/tpl/dialog.ts","webpack://qf-elf/./src/tpl/form.ts","webpack://qf-elf/./src/tpl/table-column.ts","webpack://qf-elf/./src/tpl/table.ts","webpack://qf-elf/external commonjs \"vscode\"","webpack://qf-elf/external node-commonjs \"fs\"","webpack://qf-elf/external node-commonjs \"path\"","webpack://qf-elf/webpack/bootstrap","webpack://qf-elf/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { getTableTpl } from './tpl/table';\nimport { getFormTpl } from './tpl/form';\nimport { getDialogTpl } from './tpl/dialog';\nimport path = require('path');\nimport fs = require('fs');\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// 生成表格列\n\tlet createTableColumnTemplateDispose = vscode.commands.registerCommand('qf-elf.createTableColumnTemplate', () => {\n\t\tcreateTableColumnTemplate();\n\t});\n\n\t// 生成表格模板文件\n\tlet createTableFileDispose = vscode.commands.registerCommand('qf-elf.createTableFile', (uri) => {\n\t\tcreateFile(uri, getTableTpl);\n\t});\n\n\t// 生成表单项代码\n\tlet createFormItemDispose = vscode.commands.registerCommand('qf-elf.createFormItemTemplate', (uri) => {\n\t\tcreateFormItemTemplate();\n\t});\n\n\t// 生成表单模板文件\n\tlet createFormFileDispose = vscode.commands.registerCommand('qf-elf.createFormFile', (uri) => {\n\t\tcreateFile(uri, getFormTpl);\n\t});\n\n\t// 生成弹框模板\n\tlet dialogDispose = vscode.commands.registerCommand('qf-elf.createDialog', (uri) => {\n\t\tcreateFile(uri, getDialogTpl);\n\t});\n\n\tconst disposes: any[] = [\n\t\tcreateTableColumnTemplateDispose,\n\t\tcreateTableFileDispose,\n\t\tcreateFormItemDispose,\n\t\tcreateFormFileDispose,\n\t\tdialogDispose\n\t];\n\n\tdisposes.forEach(d => {\n\t\tcontext.subscriptions.push(d);\n\t});\n\n\t// context.subscriptions.push(createTableColumnTemplateDispose);\n\t// context.subscriptions.push(createTableFileDispose);\n\t// context.subscriptions.push(createFormItemDispose);\n\t// context.subscriptions.push(createFormFileDispose);\n}\n\n/**\n * 创建文件\n * @param uri \n * @returns \n */\nasync function createFile(uri: any, getTplFn: Function) {\n\tlet name = await vscode.window.showInputBox({\n\t\tplaceHolder: '输入文件名称，请使用kebab命名方式',\n\t\tprompt: '按回车确定'\n\t});\n\n\tname = name?.replace(/\\s+/g, \"\");\n\n\tif (!name) {\n\t\treturn;\n\t}\n\n\tlet moduleName = (() => {\n\t\tlet index = uri.path.split('/').findIndex((e: any) => e === 'src');\n\n\t\tif (index === -1) {\n\t\t\treturn '';\n\t\t} else {\n\t\t\treturn uri.path.split('/').find((e: any, i: number) => i === index + 2) + '-';\n\t\t}\n\n\t})();\n\n\tlet stats = fs.statSync(uri.fsPath);\n\n\n\tconst filePath = path.join(\n\t\tstats.isDirectory() ? uri.fsPath : path.dirname(uri.fsPath),\n\t\t`${name}.vue`\n\t);\n\n\tconst hasFile = fs.existsSync(filePath);\n\n\tif (hasFile) {\n\t\tvscode.window.showErrorMessage(`文件已存在`);\n\t} else {\n\t\tfs.writeFile(filePath, await getTplFn(`${moduleName}${name}`), (err) => {\n\t\t\tif (err) {\n\t\t\t\tvscode.window.showInformationMessage(err.message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvscode.window.showTextDocument(vscode.Uri.file(filePath));\n\n\t\t\tvscode.window.showInformationMessage(`创建成功!`);\n\t\t});\n\t}\n}\n\n/**\n * 创建el-table-column代码\n */\nasync function createTableColumnTemplate() {\n\tlet text = await vscode.env.clipboard.readText();\n\tconst editor = vscode.window.activeTextEditor;\n\n\tif (!editor) {\n\t\treturn;\n\t};\n\n\tconst selection = editor.selection;\n\n\tlet jsonData: any = {};\n\n\ttry {\n\t\tjsonData = JSON.parse(text);\n\n\t\tconst createColumn = (json: any) => {\n\t\t\tlet columnTpl = ``;\n\n\t\t\tfor (const key in json) {\n\t\t\t\tcolumnTpl += `\n\t\t\t\t<el-table-column prop=\"${key}\" label=\"${json[key]}\">\n\t\t\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t\t{{ scope.row.${key} | emptyDisplay}}\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>`;\n\t\t\t}\n\n\t\t\treturn columnTpl;\n\t\t};\n\n\t\tlet cols = createColumn(jsonData);\n\n\t\teditor.edit(builder => builder.replace(selection, cols));\n\t} catch (error) {\n\t\tvscode.window.showInformationMessage(`选择的不是一个JSON对象，请复制一个JSON对象`);\n\t}\n}\n\n/**\n * 创建el-form-item代码\n */\nasync function createFormItemTemplate() {\n\tlet text = await vscode.env.clipboard.readText();\n\tconst editor = vscode.window.activeTextEditor;\n\n\tif (!editor) {\n\t\treturn;\n\t};\n\n\tconst selection = editor.selection;\n\n\tlet jsonData: any = {};\n\n\ttry {\n\t\tjsonData = JSON.parse(text);\n\n\t\tconst createColumn = (json: any) => {\n\t\t\tlet columnTpl = ``;\n\n\t\t\tfor (const key in json) {\n\t\t\t\tcolumnTpl += `\n\t\t\t\t<el-col :span=\"24\">\n          <el-form-item prop=\"${key}\">\n            <template #label>\n              <i class=\"iconfont icon-account\"></i>\n            </template>\n            <el-input v-model.trim=\"form.${key}\" placeholder=\"${json[key]}\" maxlength=\"30\" clearable></el-input>\n          </el-form-item>\n        </el-col>\n\t\t\t\t`;\n\t\t\t}\n\n\t\t\treturn columnTpl;\n\t\t};\n\n\t\tlet cols = createColumn(jsonData);\n\n\t\teditor.edit(builder => builder.replace(selection, cols));\n\t} catch (error) {\n\t\tvscode.window.showInformationMessage(`选择的不是一个JSON对象，请复制一个JSON对象`);\n\t}\n}\n\n/**\n * 创建弹框\n */\nasync function createDialogTemplate() {\n\tlet name = await vscode.window.showInputBox({\n\t\tplaceHolder: '输入文件名称，请使用kebab命名方式',\n\t\tprompt: '按回车确定'\n\t});\n\n\tname = name?.replace(/\\s+/g, \"\");\n\n\tif (!name) {\n\t\treturn;\n\t}\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() { }\n","export const getDialogTpl = (name: string) => {\r\n\r\n\r\n  const tpl = `<template>\r\n<qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\r\n  <div id=\"${name}\">\r\n    \r\n  </div>\r\n\r\n  <template #footer>\r\n    <div class=\"dialog-footer\">\r\n      <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\r\n      <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\r\n    </div>\r\n  </template>\r\n</qf-dialog>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\nname: '${name}',\r\n\r\nprops: {\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n},\r\n\r\ndata() {\r\n  return {\r\n    loading: false\r\n  };\r\n},\r\n\r\ncomputed: {\r\n  dialogTitle() {\r\n    return this.$dialogRef.record?.editId ? '编辑' : '添加';\r\n  }\r\n},\r\n\r\ncreated() {\r\n  if (this.$dialogRef.record?.editId) {\r\n  }\r\n},\r\n\r\nmethods: {\r\n  cancel() {\r\n    this.$refs.dialog.close();\r\n  },\r\n  ok() {}\r\n}\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n  `;\r\n\r\n\r\n  return tpl;\r\n};","import * as vscode from 'vscode';\r\n\r\nlet formData: string;\r\n\r\nasync function createFormItem() {\r\n  let text = await vscode.env.clipboard.readText();\r\n  const editor = vscode.window.activeTextEditor;\r\n\r\n  if (!editor) {\r\n    return;\r\n  };\r\n\r\n  try {\r\n    let jsonData = JSON.parse(text);\r\n\r\n    formData = jsonData;\r\n\r\n\r\n    const createTpl = (json: any) => {\r\n      let tpl = ``;\r\n\r\n      for (const key in json) {\r\n        tpl += `\r\n\t\t\t\t<el-col :span=\"12\">\r\n          <el-form-item prop=\"${key}\">\r\n            <template #label>\r\n              <i class=\"iconfont icon-account\"></i>\r\n            </template>\r\n            <el-input v-model.trim=\"form.${key}\" placeholder=\"${json[key]}\" maxlength=\"30\" clearable></el-input>\r\n          </el-form-item>\r\n        </el-col>\r\n        `;\r\n      }\r\n\r\n      return tpl;\r\n    };\r\n\r\n    let cols = createTpl(jsonData);\r\n\r\n    return cols;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport const getFormTpl = async (name: string) => {\r\n  let cols = await createFormItem();\r\n\r\n  const formTpl = `<template>\r\n  <div id=\"${name}\">\r\n    <qf-inner-sub-title class=\"mb-13\" icon=\"icon-article-line\" title=\"标题\"></qf-inner-sub-title>\r\n\r\n    <el-form class=\"qf-form\" :model=\"form\" ref=\"form\" :rules=\"rules\" label-width=\"45px\" :hide-required-asterisk=\"true\">\r\n      <el-row :gutter=\"30\">\r\n        \r\n        ${await createFormItem() ?? ''}\r\n        \r\n      </el-row>\r\n    </el-form>\r\n\r\n    <div class=\"dialog-footer\">\r\n      <el-button class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\r\n      <el-button type=\"primary\" @click=\"ok\">保存</el-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: '${name}',\r\n\r\n  inject: ['$dialogRef'],\r\n\r\n  data() {\r\n    return {\r\n      form: ${JSON.stringify(formData)?.replace('/,/g', '\\r\\n ,') ?? ''},\r\n      rules: {}\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    cancel() {\r\n      this.$dialogRef.close();\r\n    },\r\n    ok() {\r\n      this.$refs.form.validate(valid => {\r\n        if (valid) {\r\n          this.$dialogRef.onOk();\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n  `;\r\n\r\n  return formTpl;\r\n};","/**\r\n * 生成表格列\r\n * @param text 剪切板中的文本\r\n * @returns 生成好的表格模板\r\n */\r\nexport function createColumn(text: any) {\r\n  try {\r\n    let jsonData = JSON.parse(text);\r\n\r\n\r\n    const createTpl = (json: any) => {\r\n      let tpl = ``;\r\n\r\n      for (const key in json) {\r\n        tpl += `\r\n\t\t\t\t<el-table-column prop=\"${key}\" label=\"${json[key]}\">\r\n\t\t\t\t\t<template slot-scope=\"scope\">\r\n\t\t\t\t\t\t{{ scope.row.${key} }}\r\n\t\t\t\t\t</template>\r\n\t\t\t\t</el-table-column>\r\n\r\n        `;\r\n      }\r\n\r\n      return tpl;\r\n    };\r\n\r\n    let cols = createTpl(jsonData);\r\n\r\n    return cols;\r\n  } catch (error) {\r\n    return '';\r\n  }\r\n}","import * as vscode from 'vscode';\r\nimport * as tableColumn from './table-column';\r\n\r\nasync function createColumn() {\r\n  let text = await vscode.env.clipboard.readText();\r\n  const editor = vscode.window.activeTextEditor;\r\n\r\n  \r\n  if (!editor) {\r\n    return;\r\n  };\r\n\r\n  return tableColumn.createColumn(text);\r\n}\r\n\r\n\r\nexport const getTableTpl = async (name: string) => {\r\n  const tableTpl = `<template>\r\n  <div id=\"${name}\">\r\n    <el-table class=\"qf-table\" :data=\"listData\" style=\"width: 100%\">\r\n      ${await createColumn() ?? ''}\r\n    </el-table>\r\n\r\n    <div class=\"text-right mt6\" v-if=\"listData.total != 0\">\r\n      <el-pagination\r\n        background\r\n        layout=\"total,prev, pager, next\"\r\n        :current-page=\"queryParams.page\"\r\n        @current-change=\"paginChange\"\r\n        :total=\"listData.total\"\r\n        :page-size=\"queryParams.page_size\"\r\n      >\r\n      </el-pagination>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport debounce from '@utils/debounce';\r\n\r\nexport default {\r\n  name: '${name}',\r\n\r\n  data() {\r\n    return {\r\n      queryParams: {\r\n        page: 1,\r\n        page_size: 10\r\n      },\r\n      listData: {}\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 搜索\r\n     */\r\n    searchOnInput(value) {\r\n      debounce(() => {\r\n        this.queryParams.search = value;\r\n        this.getList();\r\n      }, 300);\r\n    },\r\n    /**\r\n     * 分页\r\n     */\r\n    paginChange(page) {\r\n      this.queryParams.page = page;\r\n      this.getList();\r\n    },\r\n    /**\r\n     * 获取列表\r\n     */\r\n    async getList() {\r\n      await this.$nextTick();\r\n      const loading = this.$loading({\r\n        target: '#${name}',\r\n        body: false,\r\n        text: '正在获取数据...'\r\n      });\r\n\r\n      // 这里记得修改成实际的模块名和接口名\r\n      let result = await this.$api.模块名.getList().catch(err => {\r\n        this.$message.error('获取列表失败');\r\n        console.error(err);\r\n      });\r\n\r\n      if (result) {\r\n        this.listData = result;\r\n      }\r\n\r\n      loading.close();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n</style>\r\n`;\r\n\r\n  return tableTpl;\r\n};","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["createFile","uri","getTplFn","name","vscode","window","showInputBox","placeHolder","prompt","replace","moduleName","index","path","split","findIndex","e","find","i","stats","fs","statSync","fsPath","filePath","join","isDirectory","dirname","existsSync","showErrorMessage","writeFile","err","showInformationMessage","message","showTextDocument","Uri","file","context","commands","registerCommand","text","env","clipboard","readText","editor","activeTextEditor","selection","jsonData","JSON","parse","cols","json","columnTpl","key","createColumn","edit","builder","error","createTableColumnTemplate","getTableTpl","createFormItemTemplate","getFormTpl","getDialogTpl","forEach","d","subscriptions","push","formData","createFormItem","tpl","createTpl","stringify","tableColumn","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}