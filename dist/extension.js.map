{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://qf-elf/./src/extension.ts","webpack://qf-elf/./src/template/base.ts","webpack://qf-elf/./src/template/dialog-form.ts","webpack://qf-elf/./src/template/dialog-table.ts","webpack://qf-elf/./src/template/dialog.ts","webpack://qf-elf/./src/template/table.ts","webpack://qf-elf/./src/template/utils.ts","webpack://qf-elf/external commonjs \"vscode\"","webpack://qf-elf/external node-commonjs \"fs\"","webpack://qf-elf/external node-commonjs \"path\"","webpack://qf-elf/webpack/bootstrap","webpack://qf-elf/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport path = require('path');\nimport fs = require('fs');\nimport table from './template/table';\nimport dialogForm from './template/dialog-form';\nimport dialogTable from './template/dialog-table';\nimport dialog from './template/dialog';\nimport base from './template/base';\nimport { createTableColumn, createFormItem, createQfLabel } from './template/utils';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// 创建表格列表文件\n\tlet createTableListDisposable = vscode.commands.registerCommand('qf-elf.createTableList', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await table.getTpl({ name: name }), uri);\n\t});\n\n\t// 生成表格列\n\tlet createTableColDisposable = vscode.commands.registerCommand('qf-elf.createTableCol', async () => {\n\t\tlet text = await vscode.env.clipboard.readText();\n\n\t\tlet cols = createTableColumn(text);\n\n\t\tpasteContent(cols);\n\t});\n\n\t// 生成弹框种带表格的文件\n\tlet createDialogTableDisposable = vscode.commands.registerCommand('qf-elf.createDialogTable', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await dialogTable.getTpl({ name: name }), uri);\n\t});\n\n\t// 生成表单项\n\tlet createFormItemDisposable = vscode.commands.registerCommand('qf-elf.createFormItem', async (uri) => {\n\t\tlet text = await vscode.env.clipboard.readText();\n\n\t\tlet cols = createFormItem(text);\n\n\t\tpasteContent(cols);\n\t});\n\n\t// 生成弹框带表单的文件\n\tlet createDialogFormDisposable = vscode.commands.registerCommand('qf-elf.createDialogForm', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await dialogForm.getTpl({ name: name }), uri);\n\t});\n\n\t// 生成纯弹框\n\tlet createDialogDisposable = vscode.commands.registerCommand('qf-elf.createDialog', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await dialog.getTpl({ name: name }), uri);\n\t});\n\n\t// 生成qf-label\n\tlet createQflabelDisposable = vscode.commands.registerCommand('qf-elf.createQflabel', async (uri) => {\n\t\tlet text = await vscode.env.clipboard.readText();\n\n\t\tlet cols = createQfLabel(text);\n\n\t\tpasteContent(cols);\n\t});\n\n\t// 生成纯弹框\n\tlet createDrawerDisposable = vscode.commands.registerCommand('qf-elf.createDrawer', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await dialog.getTpl({ name: name }), uri);\n\t});\n\n\t// 生成基础模板\n\tlet createBaseTpl = vscode.commands.registerCommand('qf-elf.createBaseTpl', async (uri) => {\n\t\tlet name = await showInputBox();\n\n\t\tif (!name) {\n\t\t\treturn;\n\t\t};\n\n\t\tcreateFile(name, await base.getTpl({ name: name }), uri);\n\t});\n\n\tconst disposes: any[] = [\n\t\tcreateTableListDisposable,\n\t\tcreateTableColDisposable,\n\t\tcreateDialogTableDisposable,\n\t\tcreateFormItemDisposable,\n\t\tcreateDialogFormDisposable,\n\t\tcreateDialogDisposable,\n\t\tcreateQflabelDisposable,\n\t\tcreateDrawerDisposable,\n\t\tcreateBaseTpl\n\t];\n\n\tdisposes.forEach(d => {\n\t\tcontext.subscriptions.push(d);\n\t});\n}\n\n/**\n * 粘贴内容\n * @param params \n */\nasync function pasteContent(content: string) {\n\tconst editor = vscode.window.activeTextEditor;\n\n\tif (!editor) {\n\t\treturn;\n\t};\n\n\tconst selection = editor.selection;\n\n\teditor.edit(builder => builder.replace(selection, content));\n}\n\n\n/**\n * 打开inputbox\n * @param uri \n * @returns \n */\nasync function showInputBox() {\n\tlet name = await vscode.window.showInputBox({\n\t\tplaceHolder: '输入文件名称，请使用kebab命名方式',\n\t\tprompt: '按回车确定'\n\t});\n\n\tname = name?.replace(/\\s+/g, \"\");\n\n\tif (!name) {\n\t\treturn;\n\t}\n\n\t// let moduleName = (() => {\n\t// \tlet index = uri.path.split('/').findIndex((e: any) => e === 'src');\n\n\t// \tif (index === -1) {\n\t// \t\treturn '';\n\t// \t} else {\n\t// \t\treturn uri.path.split('/').find((e: any, i: number) => i === index + 2) + '-';\n\t// \t}\n\t// })();\n\n\treturn `${name}`;\n}\n\n/**\n * 创建文件\n * @param uri \n * @param content 内容 \n * @returns \n */\nasync function createFile(name: string, content: string, uri: any) {\n\tlet stats = fs.statSync(uri.fsPath);\n\n\tconst filePath = path.join(\n\t\tstats.isDirectory() ? uri.fsPath : path.dirname(uri.fsPath),\n\t\t`${name}.vue`\n\t);\n\n\tconst hasFile = fs.existsSync(filePath);\n\n\tif (hasFile) {\n\t\tvscode.window.showErrorMessage(`文件已存在`);\n\t} else {\n\t\t// 创建模板\n\t\tfs.writeFile(filePath, content, (err) => {\n\t\t\tif (err) {\n\t\t\t\tvscode.window.showInformationMessage(err.message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvscode.window.showTextDocument(vscode.Uri.file(filePath));\n\n\t\t\tvscode.window.showInformationMessage(`创建成功!`);\n\t\t});\n\t}\n}\n\nexport function deactivate() { }\n","/**\n * 获取模板\n * @param params\n * @returns\n */\nconst getTpl = async (params: { name: string }) => {\n    const tpl = `<template>\n  <div></div>\n</template>\n  \n<script>\n  \nexport default {\n  name: '${params.name}',\n\n  // components:{},\n  \n  // props: {},\n  \n  data() {\n    return {\n       \n     };\n  },\n\n  // computed: {},\n\n  // created() {},\n\n  // mounted() {},\n\n  methods: {},\n\n  // watch: {},\n\n  // filters: {},\n};\n</script>\n  \n<style lang=\"less\" scoped>\n</style>`;\n\n    return tpl;\n};\n\nexport default {\n    getTpl,\n};\n","import * as vscode from 'vscode';\nimport { createFormItem } from './utils';\n\n/**\n * 生成form data\n * @param text \n * @returns \n */\nfunction generateFormData(text: string) {\n  try {\n    let jsonData = JSON.parse(text);\n\n    return JSON.stringify(jsonData)?.replace('/,/g', '\\r\\n ,') ?? '{}';\n  } catch (error) {\n    return '{}';\n  }\n}\n\n/**\n * 获取模板\n * @param params \n * @returns \n */\nconst getTpl = async (params: { name: string }) => {\n  let text = await vscode.env.clipboard.readText();\n\n  const tpl = `\n  <template>\n   <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\n    <div id=\"${params.name}\" v-loading=\"loading\">\n      <el-form class=\"qf-form\" :model=\"form\" ref=\"form\" :rules=\"rules\" label-width=\"45px\" :hide-required-asterisk=\"true\">\n        <el-row :gutter=\"24\">\n          ${createFormItem(text)}\n        </el-row>\n      </el-form>\n    </div>\n\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\n      </div>\n    </template>\n  </qf-dialog>\n</template>\n\n<script>\nexport default {\n  name: '${params.name}',\n\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      form: ${generateFormData(text)},\n      rules: {},\n      loading: false\n    };\n  },\n\n  computed: {\n    dialogTitle() {\n      return this.$dialogRef.record?.editId ? '编辑' : '添加';\n    }\n  },\n\n  created() {\n    if (this.$dialogRef.record?.editId) {\n\n    }\n  },\n\n  methods: {\n    /**\n     * 编辑\n     */\n    async edit(params) {\n      this.loading=true;\n      let result = await this.$api.模块名.方法名(params).catch(err => {\n        this.$message.success('${`提交失败`}');\n        console.error(err);\n      });\n\n      if (result) {\n        this.$message.success('${`提交成功`}');\n        this.$dialogRef.onOk();\n        this.cancel();\n      }\n\n      this.loading=false;\n    },\n    /**\n     * 新增\n     */\n    async add(params) {\n      this.loading=true;\n      let result = await this.$api.模块名.方法名(params).catch(err => {\n        this.$message.success('${`提交失败`}');\n        console.error(err);\n      });\n\n      if (result) {\n        this.$message.success('${`提交成功`}');\n        this.$dialogRef.onOk();\n        this.cancel();\n      }\n\n      this.loading=false;\n    },\n    cancel() {\n      this.$refs.dialog.close();\n    },\n    ok() {\n      let params = this.form;\n\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.$dialogRef.record.editId) {\n            this.edit(params);\n          } else {\n            this.add(params);\n          }\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n</style>\n  `;\n\n  return tpl;\n};\n\n\nexport default {\n  getTpl\n};","import * as vscode from 'vscode';\nimport { createTableColumn } from './utils';\n\nconst getTpl = async (params: { name: string }) => {\n  let text = await vscode.env.clipboard.readText();\n\n  const tpl=`\n  <template>\n   <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\n    <div id=\"${params.name}\">\n      <el-table class=\"qf-table-detail\" :data=\"listData.rows\" style=\"width: 100%\">\n          ${createTableColumn(text)}\n      </el-table>\n    </div>\n\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\n      </div>\n    </template>\n  </qf-dialog>\n</template>\n\n<script>\nexport default {\n  name: '${params.name}',\n\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      queryParams: {\n        search: '',\n        page: 1,\n        page_size: 10\n      },\n      listData: {\n        rows: [],\n        total: 0\n      },\n      loading: false\n    };\n  },\n\n  computed: {\n    dialogTitle() {\n      return this.$dialogRef.record?.editId ? '编辑' : '添加';\n    }\n  },\n\n  created() {\n    if (this.$dialogRef.record?.editId) {\n    }\n\n    this.getList();\n  },\n\n  methods: {\n    /**\n     * 获取列表\n     */\n    async getList() {\n      this.loading = true;\n\n      let result = await this.$api.模块名.getList(this.queryParams).catch(err => {\n        this.$message.error('获取列表失败');\n        console.error(err);\n      });\n\n      if (result) {\n        this.listData = result.data;\n      }\n\n      this.loading = false;\n    },\n    cancel() {\n      this.$refs.dialog.close();\n    },\n    ok() { }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n</style>\n  \n  `;\n\n  return tpl;\n};\n\n\nexport default {\n  getTpl\n};","/**\n * 获取模板\n * @param params \n * @returns \n */\nconst getTpl = async (params: { name: string }) => {\n\n  const tpl = `\n  <template>\n  <qf-dialog ref=\"dialog\" :title=\"dialogTitle\" width=\"626px\" :visible.sync=\"visible\">\n    <div id=\"${params.name}\" v-loading=\"loading\">\n      \n    </div>\n\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button :loading=\"loading\" class=\"qf-plain-btn\" @click=\"cancel\">取消</el-button>\n        <el-button :loading=\"loading\" type=\"primary\" @click=\"ok\">保存</el-button>\n      </div>\n    </template>\n  </qf-dialog>\n</template>\n\n<script>\nexport default {\n  name: '${params.name}',\n\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      loading: false\n    };\n  },\n\n  computed: {\n    dialogTitle() {\n      return '标题';\n    }\n  },\n\n  created() {\n    \n  },\n\n  methods: {\n    cancel() {\n      this.$refs.dialog.close();\n    },\n    ok() {\n      this.$dialogRef.onOk();\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n</style>\n  `;\n\n  return tpl;\n};\n\n\nexport default {\n  getTpl\n};","import * as vscode from 'vscode';\nimport { createTableColumn } from './utils';\n\nconst getTpl = async (params: { name: string }) => {\n  let text = await vscode.env.clipboard.readText();\n\n  const tpl = `<template>\n  <div id=\"${params.name}\" v-loading=\"loading\">\n    <el-table class=\"qf-table\" :data=\"listData.rows\" style=\"width: 100%\">\n      ${createTableColumn(text)}\n    </el-table>\n\n    <div class=\"text-right mt6\" v-if=\"listData.total != 0\">\n      <el-pagination\n        background\n        layout=\"total,prev, pager, next\"\n        :current-page=\"queryParams.page\"\n        @current-change=\"paginChange\"\n        :total=\"listData.total\"\n        :page-size=\"queryParams.page_size\"\n      ></el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: '${params.name}',\n\n  data() {\n    return {\n      queryParams: {\n        search: '',\n        page: 1,\n        page_size: 10\n      },\n      listData: {\n        rows: [],\n        total: 0\n      },\n      loading: false\n    };\n  },\n\n  created() {\n    this.getList();\n  },\n\n  methods: {\n    /**\n     * 查询\n     */\n    searchOnInput(value) {\n      this.$debounce(() => {\n        this.queryParams.page = 1;\n        this.queryParams.search = value;\n        this.getList();\n      }, 300);\n    },\n    /**\n     * 分页\n     */\n    paginChange(page) {\n      this.queryParams.page = page;\n      this.getList();\n    },\n    /**\n     * 获取列表\n     */\n    async getList() {\n      this.loading = true;\n\n      let result = await this.$api.模块名.getList(this.queryParams).catch(err => {\n        this.$message.error('获取列表失败');\n        console.error(err);\n      });\n\n      if (result) {\n        this.listData = result;\n      }\n\n      this.loading = false;\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n</style>`;\n\n  return tpl;\n};\n\n\nexport default {\n  getTpl\n};","/**\n * 生成表格列\n * @param json 剪切板中的文本\n * @returns 生成好的表格模板\n */\nexport function createTableColumn(json: string) {\n  try {\n    let jsonData = JSON.parse(json);\n\n\n    const createTpl = (json: any) => {\n      let tpl = ``;\n\n      for (const key in json) {\n        tpl += `\n\t\t\t\t<el-table-column prop=\"${key}\" label=\"${json[key]}\">\n\t\t\t\t\t<template slot-scope=\"scope\">\n\t\t\t\t\t\t{{ scope.row.${key} | emptyDisplay }}\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n        `;\n      }\n\n      return tpl;\n    };\n\n    let cols = createTpl(jsonData);\n\n    return cols;\n  } catch (error) {\n    return '';\n  }\n}\n\n/**\n * 生成表单项\n * @param text 剪切板中的文本\n * @returns 生成好的表格模板\n */\nexport function createFormItem(json: string) {\n\n  try {\n    let jsonData = JSON.parse(json);\n\n    const createTpl = (json: any) => {\n      let tpl = ``;\n\n      for (const key in json) {\n        tpl += `\n\t\t\t\t<el-col :span=\"24\">\n          <el-form-item prop=\"${key}\">\n            <template #label>\n              <i class=\"iconfont icon-account\"></i>\n            </template>\n            <el-input v-model.trim=\"form.${key}\" placeholder=\"${json[key]}\" maxlength=\"30\" clearable></el-input>\n          </el-form-item>\n        </el-col>\n        `;\n      }\n\n      return tpl;\n    };\n\n    let cols = createTpl(jsonData);\n\n    return cols;\n  } catch (error) {\n    return '';\n  }\n}\n\n/**\n * 生成qf-label\n * @param text 剪切板中的文本\n * @returns 生成好的表格模板\n */\nexport function createQfLabel(json: string) {\n\n  try {\n    let jsonData = JSON.parse(json);\n\n    const createTpl = (json: any) => {\n      let tpl = ``;\n\n      for (const key in json) {\n        tpl += `\n        <qf-label label=\"${json[key]}\">{{pageData.${key}  | emptyDisplay}}</qf-label>\n        `;\n      }\n\n      return tpl;\n    };\n\n    let cols = createTpl(jsonData);\n\n    return cols;\n  } catch (error) {\n    return '';\n  }\n}","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["pasteContent","content","editor","vscode","window","activeTextEditor","selection","edit","builder","replace","showInputBox","name","placeHolder","prompt","createFile","uri","stats","fs","statSync","fsPath","filePath","path","join","isDirectory","dirname","existsSync","showErrorMessage","writeFile","err","showInformationMessage","message","showTextDocument","Uri","file","context","commands","registerCommand","getTpl","text","env","clipboard","readText","createTableColumn","createFormItem","createQfLabel","forEach","d","subscriptions","push","params","tpl","jsonData","JSON","parse","stringify","error","generateFormData","json","createTpl","key","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}