(()=>{"use strict";var n={112:function(n,t,e){var i=this&&this.__awaiter||function(n,t,e,i){return new(e||(e=Promise))((function(o,l){function a(n){try{s(i.next(n))}catch(n){l(n)}}function r(n){try{s(i.throw(n))}catch(n){l(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(a,r)}s((i=i.apply(n,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const o=e(496),l=e(391),a=e(258),r=e(426),s=e(17),c=e(147);function d(n,t){return i(this,void 0,void 0,(function*(){let e=yield o.window.showInputBox({placeHolder:"输入文件名称，请使用kebab命名方式",prompt:"按回车确定"});if(e=null==e?void 0:e.replace(/\s+/g,""),!e)return;let i=(()=>{let t=n.path.split("/").findIndex((n=>"src"===n));return-1===t?"":n.path.split("/").find(((n,e)=>e===t+2))+"-"})(),l=c.statSync(n.fsPath);const a=s.join(l.isDirectory()?n.fsPath:s.dirname(n.fsPath),`${e}.vue`);c.existsSync(a)?o.window.showErrorMessage("文件已存在"):c.writeFile(a,yield t(`${i}${e}`),(n=>{n?o.window.showInformationMessage(n.message):(o.window.showTextDocument(o.Uri.file(a)),o.window.showInformationMessage("创建成功!"))}))}))}t.activate=function(n){[o.commands.registerCommand("qf-elf.createTableColumnTemplate",(()=>{!function(){i(this,void 0,void 0,(function*(){let n=yield o.env.clipboard.readText();const t=o.window.activeTextEditor;if(!t)return;const e=t.selection;let i={};try{i=JSON.parse(n);let o=(n=>{let t="";for(const e in n)t+=`\n\t\t\t\t<el-table-column prop="${e}" label="${n[e]}">\n\t\t\t\t\t<template slot-scope="scope">\n\t\t\t\t\t\t{{ scope.row.${e} | emptyDisplay}}\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>`;return t})(i);t.edit((n=>n.replace(e,o)))}catch(n){o.window.showInformationMessage("选择的不是一个JSON对象，请复制一个JSON对象")}}))}()})),o.commands.registerCommand("qf-elf.createTableFile",(n=>{d(n,l.getTableTpl)})),o.commands.registerCommand("qf-elf.createFormItemTemplate",(n=>{!function(){i(this,void 0,void 0,(function*(){let n=yield o.env.clipboard.readText();const t=o.window.activeTextEditor;if(!t)return;const e=t.selection;let i={};try{i=JSON.parse(n);let o=(n=>{let t="";for(const e in n)t+=`\n\t\t\t\t<el-col :span="24">\n          <el-form-item prop="${e}">\n            <template #label>\n              <i class="iconfont icon-account"></i>\n            </template>\n            <el-input v-model.trim="form.${e}" placeholder="${n[e]}" maxlength="30" clearable></el-input>\n          </el-form-item>\n        </el-col>\n\t\t\t\t`;return t})(i);t.edit((n=>n.replace(e,o)))}catch(n){o.window.showInformationMessage("选择的不是一个JSON对象，请复制一个JSON对象")}}))}()})),o.commands.registerCommand("qf-elf.createFormFile",(n=>{d(n,a.getFormTpl)})),o.commands.registerCommand("qf-elf.createDialog",(n=>{d(n,r.getDialogTpl)}))].forEach((t=>{n.subscriptions.push(t)}))},t.deactivate=function(){}},426:(n,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDialogTpl=void 0,t.getDialogTpl=n=>`<template>\n<qf-dialog ref="dialog" :title="dialogTitle" width="626px" :visible.sync="visible">\n  <div id="${n}">\n    \n  </div>\n\n  <template #footer>\n    <div class="dialog-footer">\n      <el-button :loading="loading" class="qf-plain-btn" @click="cancel">取消</el-button>\n      <el-button :loading="loading" type="primary" @click="ok">保存</el-button>\n    </div>\n  </template>\n</qf-dialog>\n</template>\n\n<script>\nexport default {\nname: '${n}',\n\nprops: {\n  visible: {\n    type: Boolean,\n    default: false\n  }\n},\n\ndata() {\n  return {\n    loading: false\n  };\n},\n\ncomputed: {\n  dialogTitle() {\n    return this.$dialogRef.record?.editId ? '编辑' : '添加';\n  }\n},\n\ncreated() {\n  if (this.$dialogRef.record?.editId) {\n  }\n},\n\nmethods: {\n  cancel() {\n    this.$refs.dialog.close();\n  },\n  ok() {}\n}\n};\n<\/script>\n\n<style lang="less" scoped>\n</style>\n  `},258:function(n,t,e){var i=this&&this.__awaiter||function(n,t,e,i){return new(e||(e=Promise))((function(o,l){function a(n){try{s(i.next(n))}catch(n){l(n)}}function r(n){try{s(i.throw(n))}catch(n){l(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(a,r)}s((i=i.apply(n,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getFormTpl=void 0;const o=e(496);let l;function a(){return i(this,void 0,void 0,(function*(){let n=yield o.env.clipboard.readText();if(o.window.activeTextEditor)try{let t=JSON.parse(n);return l=t,(n=>{let t="";for(const e in n)t+=`\n\t\t\t\t<el-col :span="12">\n          <el-form-item prop="${e}">\n            <template #label>\n              <i class="iconfont icon-account"></i>\n            </template>\n            <el-input v-model.trim="form.${e}" placeholder="${n[e]}" maxlength="30" clearable></el-input>\n          </el-form-item>\n        </el-col>\n        `;return t})(t)}catch(n){return""}}))}t.getFormTpl=n=>i(void 0,void 0,void 0,(function*(){var t,e,i;return yield a(),`<template>\n  <div id="${n}">\n    <qf-inner-sub-title class="mb-13" icon="icon-article-line" title="标题"></qf-inner-sub-title>\n\n    <el-form class="qf-form" :model="form" ref="form" :rules="rules" label-width="45px" :hide-required-asterisk="true">\n      <el-row :gutter="30">\n        \n        ${null!==(t=yield a())&&void 0!==t?t:""}\n        \n      </el-row>\n    </el-form>\n\n    <div class="dialog-footer">\n      <el-button class="qf-plain-btn" @click="cancel">取消</el-button>\n      <el-button type="primary" @click="ok">保存</el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: '${n}',\n\n  inject: ['$dialogRef'],\n\n  data() {\n    return {\n      form: ${null!==(i=null===(e=JSON.stringify(l))||void 0===e?void 0:e.replace("/,/g","\r\n ,"))&&void 0!==i?i:""},\n      rules: {}\n    };\n  },\n\n  methods: {\n    cancel() {\n      this.$dialogRef.close();\n    },\n    ok() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          this.$dialogRef.onOk();\n        }\n      });\n    }\n  }\n};\n<\/script>\n\n<style lang="less" scoped>\n</style>\n  `}))},739:(n,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createColumn=void 0,t.createColumn=function(n){try{return(n=>{let t="";for(const e in n)t+=`\n\t\t\t\t<el-table-column prop="${e}" label="${n[e]}">\n\t\t\t\t\t<template slot-scope="scope">\n\t\t\t\t\t\t{{ scope.row.${e} }}\n\t\t\t\t\t</template>\n\t\t\t\t</el-table-column>\n\n        `;return t})(JSON.parse(n))}catch(n){return""}}},391:function(n,t,e){var i=this&&this.__awaiter||function(n,t,e,i){return new(e||(e=Promise))((function(o,l){function a(n){try{s(i.next(n))}catch(n){l(n)}}function r(n){try{s(i.throw(n))}catch(n){l(n)}}function s(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(a,r)}s((i=i.apply(n,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getTableTpl=void 0;const o=e(496),l=e(739);t.getTableTpl=n=>i(void 0,void 0,void 0,(function*(){var t;return`<template>\n  <div id="${n}">\n    <el-table class="qf-table" :data="listData" style="width: 100%">\n      ${null!==(t=yield function(){return i(this,void 0,void 0,(function*(){let n=yield o.env.clipboard.readText();if(o.window.activeTextEditor)return l.createColumn(n)}))}())&&void 0!==t?t:""}\n    </el-table>\n\n    <div class="text-right mt6" v-if="listData.total != 0">\n      <el-pagination\n        background\n        layout="total,prev, pager, next"\n        :current-page="queryParams.page"\n        @current-change="paginChange"\n        :total="listData.total"\n        :page-size="queryParams.page_size"\n      >\n      </el-pagination>\n    </div>\n  </div>\n</template>\n\n<script>\nimport debounce from '@utils/debounce';\n\nexport default {\n  name: '${n}',\n\n  data() {\n    return {\n      queryParams: {\n        page: 1,\n        page_size: 10\n      },\n      listData: {}\n    };\n  },\n\n  methods: {\n    /**\n     * 搜索\n     */\n    searchOnInput(value) {\n      debounce(() => {\n        this.queryParams.search = value;\n        this.getList();\n      }, 300);\n    },\n    /**\n     * 分页\n     */\n    paginChange(page) {\n      this.queryParams.page = page;\n      this.getList();\n    },\n    /**\n     * 获取列表\n     */\n    async getList() {\n      await this.$nextTick();\n      const loading = this.$loading({\n        target: '#${n}',\n        body: false,\n        text: '正在获取数据...'\n      });\n\n      // 这里记得修改成实际的模块名和接口名\n      let result = await this.$api.模块名.getList().catch(err => {\n        this.$message.error('获取列表失败');\n        console.error(err);\n      });\n\n      if (result) {\n        this.listData = result;\n      }\n\n      loading.close();\n    }\n  }\n};\n<\/script>\n\n<style lang="less" scoped>\n</style>\n`}))},496:n=>{n.exports=require("vscode")},147:n=>{n.exports=require("fs")},17:n=>{n.exports=require("path")}},t={},e=function e(i){var o=t[i];if(void 0!==o)return o.exports;var l=t[i]={exports:{}};return n[i].call(l.exports,l,l.exports,e),l.exports}(112);module.exports=e})();